
Problem: Find Second Largest Element in an Array (C Version)
Source: GeeksForGeeks
Category: Array

Problem Statement:
Given an array of positive integers arr[], return the second largest element from the array. If the second largest element doesn't exist then return -1.

Examples:

Input: arr[] = [12, 35, 1, 10, 34, 1]
Output: 34
Explanation: The largest element of the array is 35 and the second largest element is 34.

Input: arr[] = [10, 5, 10]
Output: 5
Explanation: The largest element of the array is 10 and the second largest element is 5.

Input: arr[] = [10, 10, 10]
Output: -1
Explanation: The largest element of the array is 10 and the second largest element does not exist.

Approach:
- Initialize two variables: `max` and `second_max` to INT_MIN
- Loop through the array
- If current element > max → update both max and second_max
- If it’s not equal to max, but > second_max → update second_max

Time Complexity: O(n)
Space Complexity: O(1)


Now before goint to the problem lets understand the core logic behind this type of problem.

//when you get problem, 1st ask yourself what the question want to tll me.

Question: What does "second largest" really mean?

//if its ask 1st largest you easily approach if eg, if((a>b)?((a>c)?a:c);(b>c)?b:c)
right..but what about this.

We want the number that is smaller than the largest, but larger than all the others.
    That means:

        It must be different from the largest (e.g., if all values are the same → no second largest)

        It must be the second-best performer — not just the second in order

📌 Key insight: You can’t just sort and grab arr[n-2] — because values might repeat!
🟢 Step 2: Think in Terms of State Tracking (like a Game)

This is where the trophy analogy comes in handy:
👦 Imagine:

You’re hosting a race. Runners (array elements) come in one by one.

You only have two trophies:

    🥇 max → for the fastest runner

    🥈 second_max → for the second-fastest runner

You look at each runner and make decisions based on two things:

    Are they better than the current fastest?

    Are they better than second best?

🟢 Step 3: Walk Through Example by Hand

arr = [12, 35, 1, 10, 34, 1]

then we initializing // well #include<limit.h> use for INT_MIN,INT_MAX etc. int_min the value is -2,147,483,648 for a 32-bit signed integer
max = INT_MIN        // we  can also use  max =-1 its also valid.
second_max = INT_MIN

| i | arr\[i] | max | second\_max | Why?                                         |
| - | ------- | --- | ----------- | -------------------------------------------- |
| 0 | 12      | 12  | INT\_MIN    | First number, becomes `max`                  |
| 1 | 35      | 35  | 12          | New biggest → update both                    |
| 2 | 1       | 35  | 12          | Smaller than both → no change                |
| 3 | 10      | 35  | 12          | Smaller than both → no change                |
| 4 | 34      | 35  | 34          | Smaller than `max`, bigger than `second_max` |
| 5 | 1       | 35  | 34          | No change                                    |

so print- 34

    So what’s the "problem-solving strategy" here?

    You're tracking two values dynamically

    The idea is to update your values only when necessary

    You're avoiding brute-force methods like sorting or nested loops

    It's a single-pass, stateful solution

📦 This becomes a general technique:
    When asked to find “top 2”, “min and second min”, “kth largest” — you can extend this style.

    So have you thought about alternative approaches? Sure — there are others you can come up with, especially as problems evolve. 
    but if you think basic way, i dont say think like me, you cant think better than me. 
        So have you thought about alternative approaches? Sure — there are others you can come up with, especially as problems evolve. 
    now the question comw, what will you do if I want the 3rd largest, 4th largest?
    tell me, tell me??

    well this leads to ->
    Min-heaps (priority queue) , Sorting + unique filtering, TreeSet (in Java)

    well this technique called "top-k","K-th Largest"

    now come real world example for this::
    i know you may surprise, is this have a real world problem,,where..??
    Gaming leaderboard → You want 2nd highest score
    CPU performance monitor → Track second most consuming process
    Sensor data → Second highest temperature over time

// when open GFG you saw this upeer int part. dont ever remove it other wise your
// code doesnt run. I tell you becuse i did this without purpose  and start writing 
// with include <limits.h> after finish its say dont us eint main becaus eits have own. so i 
// share the gfg code editor code.

int getSecondLargest(int *arr, int n) {
    
    int max=INT_MIN;
    int second_max=INT_MIN;
    int i;
    for(i=0;i<n;i++){
        if(arr[i]>max){
            second_max=max;
            max=arr[i];
        }
        else if(arr[i]>second_max && arr[i]!=max){
            second_max=arr[i];
        }
    }
    if(second_max==INT_MIN) return -1;
    return second_max;
}

try to add this ->

    if (n < 2) {
        printf("Array must have at least two elements.\n");
        return 1;
    }
so what it does 
| Input                 | Output   | Why?                           |
| --------------------- | -------- | ------------------------------ |
| [1]                   | Error    | Not enough elements            |
| [5, 5]                | -1       | All elements are same          |
| [5, 10]               | 5        | Valid second largest           |
| [INT_MAX, INT_MIN]    | INT_MIN  | Works because we used INT_MIN |
